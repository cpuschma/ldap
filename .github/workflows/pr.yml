name: PR

on:
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.24"]
        directory: ["./v3"]
    name: Go ${{ matrix.go }}.x PR Validate ${{ matrix.directory }} (Modules)
    
    services:
      389ds:
        image: quay.io/389ds/dirsrv:latest
        ports:
          - 3389:3389
          - 3636:3636
        env:
          DS_DM_PASSWORD: admin123
          DS_SUFFIX_NAME: dc=example,dc=com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Install LDAP utilities
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq ldap-utils netcat-openbsd

      - name: Wait for 389 Directory Server
        run: |
          echo "Waiting for 389 DS port to be available..."
          timeout 180 bash -c 'until nc -z localhost 3389; do echo "Waiting for port 3389..."; sleep 2; done'
          echo "Port 3389 is open, waiting a bit more for LDAP service..."
          sleep 10

      - name: Test LDAP connection
        run: |
          echo "Testing basic LDAP connection..."
          # Try a simple anonymous bind first
          ldapsearch -x -H ldap://localhost:3389 -b "" -s base || echo "Anonymous search failed"
          
          # Try with credentials but no base DN restriction
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "" -s base || echo "Authenticated search failed"
          
          # Check what's actually available
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "" -s one || echo "One-level search failed"

      - name: Provision LDAP with dummy data
        run: |
          echo "Starting LDAP provisioning..."
          
          # First, let's see what suffix/base DNs are available
          echo "Checking available naming contexts..."
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "" -s base namingContexts || true
          
          # Try to create the base DN if it doesn't exist
          echo "Ensuring base DN exists..."
          if ! ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "dc=example,dc=com" -s base > /dev/null 2>&1; then
            echo "Base DN doesn't exist, creating it..."
            cat << EOF | ldapadd -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 || echo "Failed to create base DN"
          dn: dc=example,dc=com
          objectClass: top
          objectClass: domain
          dc: example
          EOF
          else
            echo "Base DN already exists"
          fi

          # Create organizational units
          echo "Creating organizational units..."
          cat << EOF | ldapadd -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 || echo "Failed to create OUs"
          dn: ou=people,dc=example,dc=com
          objectClass: organizationalUnit
          ou: people
          
          dn: ou=groups,dc=example,dc=com
          objectClass: organizationalUnit
          ou: groups
          EOF

          # Add dummy users
          echo "Adding dummy users..."
          cat << EOF | ldapadd -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 || echo "Failed to add users"
          dn: cn=John Doe,ou=people,dc=example,dc=com
          objectClass: inetOrgPerson
          objectClass: organizationalPerson
          objectClass: person
          objectClass: top
          cn: John Doe
          sn: Doe
          givenName: John
          mail: john.doe@example.com
          uid: jdoe
          userPassword: password123
          
          dn: cn=Jane Smith,ou=people,dc=example,dc=com
          objectClass: inetOrgPerson
          objectClass: organizationalPerson
          objectClass: person
          objectClass: top
          cn: Jane Smith
          sn: Smith
          givenName: Jane
          mail: jane.smith@example.com
          uid: jsmith
          userPassword: password456
          
          dn: cn=Bob Wilson,ou=people,dc=example,dc=com
          objectClass: inetOrgPerson
          objectClass: organizationalPerson
          objectClass: person
          objectClass: top
          cn: Bob Wilson
          sn: Wilson
          givenName: Bob
          mail: bob.wilson@example.com
          uid: bwilson
          userPassword: password789
          EOF

          # Add dummy groups
          echo "Adding dummy groups..."
          cat << EOF | ldapadd -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 || echo "Failed to add groups"
          dn: cn=developers,ou=groups,dc=example,dc=com
          objectClass: groupOfNames
          cn: developers
          description: Development team
          member: cn=John Doe,ou=people,dc=example,dc=com
          member: cn=Jane Smith,ou=people,dc=example,dc=com
          
          dn: cn=admins,ou=groups,dc=example,dc=com
          objectClass: groupOfNames
          cn: admins
          description: System administrators
          member: cn=Bob Wilson,ou=people,dc=example,dc=com
          EOF

      - name: Verify LDAP data
        run: |
          echo "Verifying LDAP entries..."
          echo "Available naming contexts:"
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "" -s base namingContexts || true
          
          echo "Entries under dc=example,dc=com:"
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "dc=example,dc=com" "(objectClass=*)" dn || echo "No entries found or base DN doesn't exist"
          
          echo "Total entry count:"
          ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w admin123 -b "dc=example,dc=com" "(objectClass=*)" dn 2>/dev/null | grep -c "^dn:" || echo "0"

      - name: Set LDAP environment variables
        run: |
          echo "LDAP_HOST=localhost" >> $GITHUB_ENV
          echo "LDAP_PORT=3389" >> $GITHUB_ENV
          echo "LDAP_BIND_DN=cn=Directory Manager" >> $GITHUB_ENV
          echo "LDAP_BIND_PASSWORD=admin123" >> $GITHUB_ENV
          echo "LDAP_BASE_DN=dc=example,dc=com" >> $GITHUB_ENV

      - name: Version
        run: go version
